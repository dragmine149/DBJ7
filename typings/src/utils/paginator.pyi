import discord
from _typeshed import Incomplete
from discord.ext import commands as commands, menus
from typing import Any

class Pages(discord.ui.View):
    source: Incomplete
    check_embeds: Incomplete
    ctx: Incomplete
    message: Incomplete
    current_page: int
    compact: Incomplete
    input_lock: Incomplete
    def __init__(
        self,
        source: menus.PageSource,
        *,
        ctx: commands.Context,
        check_embeds: bool = ...,
        compact: bool = ...
    ) -> None: ...
    def fill_items(self) -> None: ...
    async def show_page(
        self, interaction: discord.Interaction, page_number: int
    ) -> None: ...
    async def show_checked_page(
        self, interaction: discord.Interaction, page_number: int
    ) -> None: ...
    async def interaction_check(self, interaction: discord.Interaction) -> bool: ...
    async def on_timeout(self) -> None: ...
    async def on_error(
        self, interaction: discord.Interaction, exception: Exception, item: Any
    ) -> None: ...
    async def start(self) -> None: ...
    async def go_to_first_page(
        self, interaction: discord.Interaction, button: discord.ui.Button
    ): ...
    async def go_to_previous_page(
        self, interaction: discord.Interaction, button: discord.ui.Button
    ): ...
    async def go_to_current_page(
        self, interaction: discord.Interaction, button: discord.ui.Button
    ): ...
    async def go_to_next_page(
        self, interaction: discord.Interaction, button: discord.ui.Button
    ): ...
    async def go_to_last_page(
        self, interaction: discord.Interaction, button: discord.ui.Button
    ): ...
    async def numbered_page(
        self, interaction: discord.Interaction, button: discord.ui.Button
    ): ...
    async def stop_pages(
        self, interaction: discord.Interaction, button: discord.ui.Button
    ): ...

class FieldPageSource(menus.ListPageSource):
    embed: Incomplete
    def __init__(self, entries, *, per_page: int = ...) -> None: ...
    async def format_page(self, menu, entries): ...

class TextPageSource(menus.ListPageSource):
    def __init__(
        self, text, *, prefix: str = ..., suffix: str = ..., max_size: int = ...
    ) -> None: ...
    async def format_page(self, menu, content): ...

class SimplePageSource(menus.ListPageSource):
    async def format_page(self, menu, entries): ...

class SimplePages(Pages):
    embed: Incomplete
    def __init__(
        self, entries, *, ctx: commands.Context, per_page: int = ...
    ) -> None: ...
